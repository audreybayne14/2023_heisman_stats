#install and load

!pip install scikit-learn
!pip install numpy

from sklearn.linear_model import LinearRegression
import numpy as np

#data
player_names = ['Jayden Daniels', 'Michael Penix, Jr.', 'Bo Nix', 'Marvin Harrison, Jr.', 'Jordan Travis', 'Jalen Milroe', 'Ollie Gordon', 'Cody Schrader', 'Blake Corum', 'J.J. McCarthy']
heisman_points = [2029, 1701, 885, 352, 85, 73, 31, 29, 28, 21]
first_place_votes = [503, 292, 51, 20, 8, 4, 1, 1, 3, 1]
fantasy_points = [477.82, 336.92, 413.72, 213.7, 245.8, 318.46, 336.1, 264.8, 304.2, 237.84]
fantasy_rankings = [1, 8, 2, 83, 49, 14, 9, 35, 21, 54]
yards_per_game = [412.2, 327.4, 338.7, 0, 266.5, 258.8, 123.7, 125.2, 79.3, 212.9]
yards_per_play = [10.71, 8.32, 9.05, 13, 7.39, 7.56, 6.06, 5.89, 6.61, 8.06]

# features/target
X = np.array([first_place_votes, fantasy_points, fantasy_rankings, yards_per_game, yards_per_play]).T
y = np.array(heisman_points)

# fit the model
model = LinearRegression()
model.fit(X[:, 1:], y)

# predictions
predicted_heisman_points = model.predict(X[:, 1:])

# find player with highest predicted heisman points
predicted_winner_index = np.argmax(predicted_heisman_points)
predicted_winner = player_names[predicted_winner_index]

# print results
print("Predicted Heisman winner based on non-Heisman stats:", predicted_winner)
print("Actual Heisman winner:", player_names[0])  # Assuming the actual winner is the first player in the list

# create bar plot for actual Heisman rankings
plt.figure(figsize=(10, 6))
bars = plt.bar(player_names, heisman_points, color='blue', alpha=0.5, label='Actual Heisman Points')
plt.xlabel('Player')
plt.ylabel('Heisman Points')
plt.title('Actual Heisman Points')
plt.legend()
plt.xticks(rotation=45)

for bar, point in zip(bars, heisman_points):
    plt.text(bar.get_x() + bar.get_width() / 2, 
             bar.get_height() + 5, 
             point, 
             ha='center', 
             va='bottom')

plt.tight_layout()
plt.show()

# create bar plot for predicted Heisman rankings
plt.figure(figsize=(10, 6))
bars = plt.bar(player_names, predicted_heisman_points, color='red', alpha=0.5, label='Predicted Heisman Points')
plt.xlabel('Player')
plt.ylabel('Heisman Points')
plt.title('Predicted Heisman Points (Based on Non-Heisman Data)')
plt.legend()
plt.xticks(rotation=45)

# Adding data labels to the bars
for bar, point in zip(bars, predicted_heisman_points):
    plt.text(bar.get_x() + bar.get_width() / 2, 
             bar.get_height() + 5, 
             '%.2f' % point, 
             ha='center', 
             va='bottom')

plt.tight_layout()
plt.show()
